// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: mars.proto

package gomars_go

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_mars_proto protoreflect.FileDescriptor

var file_mars_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x72,
	0x70, 0x63, 0x1a, 0x11, 0x6d, 0x61, 0x72, 0x73, 0x2d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x7b, 0x0a, 0x06, 0x47, 0x6f, 0x4d, 0x61, 0x72, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x53, 0x6f, 0x75, 0x6c, 0x54, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x73, 0x5f,
	0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_mars_proto_goTypes = []interface{}{
	(*ActionRequest)(nil),  // 0: grpc.ActionRequest
	(*GetRequest)(nil),     // 1: grpc.GetRequest
	(*ActionResponse)(nil), // 2: grpc.ActionResponse
	(*NoticeResponse)(nil), // 3: grpc.NoticeResponse
}
var file_mars_proto_depIdxs = []int32{
	0, // 0: grpc.GoMars.Action:input_type -> grpc.ActionRequest
	1, // 1: grpc.GoMars.Notice:input_type -> grpc.GetRequest
	2, // 2: grpc.GoMars.Action:output_type -> grpc.ActionResponse
	3, // 3: grpc.GoMars.Notice:output_type -> grpc.NoticeResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mars_proto_init() }
func file_mars_proto_init() {
	if File_mars_proto != nil {
		return
	}
	file_mars_struct_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mars_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mars_proto_goTypes,
		DependencyIndexes: file_mars_proto_depIdxs,
	}.Build()
	File_mars_proto = out.File
	file_mars_proto_rawDesc = nil
	file_mars_proto_goTypes = nil
	file_mars_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GoMarsClient is the client API for GoMars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoMarsClient interface {
	Action(ctx context.Context, opts ...grpc.CallOption) (GoMars_ActionClient, error)
	Notice(ctx context.Context, opts ...grpc.CallOption) (GoMars_NoticeClient, error)
}

type goMarsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoMarsClient(cc grpc.ClientConnInterface) GoMarsClient {
	return &goMarsClient{cc}
}

func (c *goMarsClient) Action(ctx context.Context, opts ...grpc.CallOption) (GoMars_ActionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoMars_serviceDesc.Streams[0], "/grpc.GoMars/Action", opts...)
	if err != nil {
		return nil, err
	}
	x := &goMarsActionClient{stream}
	return x, nil
}

type GoMars_ActionClient interface {
	Send(*ActionRequest) error
	Recv() (*ActionResponse, error)
	grpc.ClientStream
}

type goMarsActionClient struct {
	grpc.ClientStream
}

func (x *goMarsActionClient) Send(m *ActionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goMarsActionClient) Recv() (*ActionResponse, error) {
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goMarsClient) Notice(ctx context.Context, opts ...grpc.CallOption) (GoMars_NoticeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoMars_serviceDesc.Streams[1], "/grpc.GoMars/Notice", opts...)
	if err != nil {
		return nil, err
	}
	x := &goMarsNoticeClient{stream}
	return x, nil
}

type GoMars_NoticeClient interface {
	Send(*GetRequest) error
	Recv() (*NoticeResponse, error)
	grpc.ClientStream
}

type goMarsNoticeClient struct {
	grpc.ClientStream
}

func (x *goMarsNoticeClient) Send(m *GetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goMarsNoticeClient) Recv() (*NoticeResponse, error) {
	m := new(NoticeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoMarsServer is the server API for GoMars service.
type GoMarsServer interface {
	Action(GoMars_ActionServer) error
	Notice(GoMars_NoticeServer) error
}

// UnimplementedGoMarsServer can be embedded to have forward compatible implementations.
type UnimplementedGoMarsServer struct {
}

func (*UnimplementedGoMarsServer) Action(GoMars_ActionServer) error {
	return status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (*UnimplementedGoMarsServer) Notice(GoMars_NoticeServer) error {
	return status.Errorf(codes.Unimplemented, "method Notice not implemented")
}

func RegisterGoMarsServer(s *grpc.Server, srv GoMarsServer) {
	s.RegisterService(&_GoMars_serviceDesc, srv)
}

func _GoMars_Action_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoMarsServer).Action(&goMarsActionServer{stream})
}

type GoMars_ActionServer interface {
	Send(*ActionResponse) error
	Recv() (*ActionRequest, error)
	grpc.ServerStream
}

type goMarsActionServer struct {
	grpc.ServerStream
}

func (x *goMarsActionServer) Send(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goMarsActionServer) Recv() (*ActionRequest, error) {
	m := new(ActionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GoMars_Notice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoMarsServer).Notice(&goMarsNoticeServer{stream})
}

type GoMars_NoticeServer interface {
	Send(*NoticeResponse) error
	Recv() (*GetRequest, error)
	grpc.ServerStream
}

type goMarsNoticeServer struct {
	grpc.ServerStream
}

func (x *goMarsNoticeServer) Send(m *NoticeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goMarsNoticeServer) Recv() (*GetRequest, error) {
	m := new(GetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GoMars_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GoMars",
	HandlerType: (*GoMarsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Action",
			Handler:       _GoMars_Action_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Notice",
			Handler:       _GoMars_Notice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mars.proto",
}
